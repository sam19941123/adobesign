group = 'com.adobe.sign'
version = '1.1.1'


buildscript {
    repositories {
        jcenter()
    }
}

allprojects {
    repositories {
        jcenter()
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.11'
    }

    apply plugin: 'java'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    task execute(type:JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }
    test {
        maxParallelForks=java.lang.Runtime.runtime.availableProcessors()
    }

    ext {
        swagger_annotations_version = "1.5.9"
        jackson_version = "2.7.4"
        jackson_datatype_joda = "2.7.4"
        jersey_version = "1.19.1"
        jodatime_version = "2.9.4"
        commons_validator_version = "1.5.1"
        log4j_version = "1.2.17"
        junit_version = "4.12"
    }
    dependencies {
        compile "io.swagger:swagger-annotations:$swagger_annotations_version"
        compile "com.sun.jersey:jersey-client:$jersey_version"
        compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
        compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
        compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jackson_datatype_joda"
        compile "joda-time:joda-time:$jodatime_version"
        compile "io.swagger:swagger-annotations:$swagger_annotations_version"
        compile "io.swagger:swagger-annotations:$swagger_annotations_version"
        compile "commons-validator:commons-validator:$commons_validator_version"
        compile "log4j:log4j:$log4j_version"
        testCompile "junit:junit:$junit_version"
    }
}

project(':rest-api-sdk') {
    def newJarName = rootProject.name + '-' + rootProject.version
    jar.baseName = newJarName
    jar.doLast {
        copy {
            from "${buildDir}/libs/${newJarName}.jar"
            into "../build/libs"
        }
    }
    task testSetup (dependsOn: 'classes', type: JavaExec) {
        main = 'com.adobe.sign.utils.TestSetup'
        classpath = sourceSets.test.runtimeClasspath
    }

    test.dependsOn testSetup
}

project(':rest-api-sample') {
    dependencies {
        compile project(':rest-api-sdk')
        sourceSets {
            samples{
                main {
                    java {
                        srcDir './src/main/java'
                    }
                }
            }
        }
        def list=["ArchiveAllSignedAgreements",
                  "CreateAlternateParticipant",
                  "CreateNewGroupInAccount",
                  "CreateNewUserInAccount",
                  "CreateNewWidgetWithCounterSigners",
                  "DownloadAuditTrail",
                  "DownloadDocumentsOfAgreement",
                  "GetGroupsInAccount",
                  "GetNextParticipantInfoOfAllWaitingAgreements",
                  "GetPersonalLibraryDocumentsOfUser",
                  "GetSearchAgreementAssetEventsForUser",
                  "GetSigningUrl",
                  "GetStatusOfAgreements",
                  "GetStatusOfMegaSigns",
                  "GetUrlForManagePage",
                  "GetUrlForSettingsPage",
                  "GetUrlForViewAgreementAssetPage",
                  "GetUsersInAccount",
                  "RetrieveFormDataOfWidget",
                  "SendAgreementUsingLibraryDocument",
                  "SendAgreementUsingTransientDocument",
                  "SendMegaSignUsingLibraryDocument",
                  "SendMegaSignUsingTransientDocument",
                  "SendReminderOnPendingAgreements",
				  "SendToGroup"].toArray()
        def fileName = ""
        def pathPrefix = "com.adobe.sign.api."
        def filePath = ""
        task createTasks {
            list.length.times { counter ->
                fileName = list[counter]
                filePath = pathPrefix +list[counter]
                task "Sample_$fileName"(type: JavaExec) {
                    main = filePath
                    classpath = sourceSets.main.runtimeClasspath
                }
            }
        }
        task allSamples (dependsOn: [createTasks,tasks.matching{Task task -> task.name.startsWith("Sample_")}]){
        }
        def pathOAuthSampleDesktop = "com.adobe.sign.api.OAuth.desktopApp.CreateGroupWithOAuthWorkFlowUsingDesktopApp"
        def pathOAuthSampleServer = "com.adobe.sign.api.OAuth.server.CreateGroupWithOAuthWorkFlowUsingServer"
        task CreateGroupWithOAuthWorkFlowUsingDesktopApp(type: JavaExec){
            main = pathOAuthSampleDesktop
            classpath = sourceSets.main.runtimeClasspath
        }
        task CreateGroupWithOAuthWorkFlowUsingServer(type: JavaExec){
            main = pathOAuthSampleServer
            classpath = sourceSets.main.runtimeClasspath
        }
    }
}
